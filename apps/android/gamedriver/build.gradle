// Top-level build file where you can add configuration options common to all sub-projects/modules.



buildscript {
    def path = providers
            .gradleProperty("com.google.android.filament.dist-dir")
            .get()

    def directory = objects.fileProperty().fileValue(new File(path)).getAsFile().get()
    def filamentPath = directory.absolutePath

    // Our CMake scripts require a forward-slash path for the FILAMENT_DIST_DIR
    // variable, so here we convert the native path to a forward-slash path.
    filamentPath = filamentPath.replace(File.separator, '/')

    // Warning: changing this property does not work well with incremental builds.
    def excludeVulkan = providers
            .gradleProperty("com.google.android.filament.exclude-vulkan")
            .isPresent()

    def matdbg = true/*providers
            .gradleProperty("com.google.android.filament.matdbg")
            .isPresent()*/

    def abis = ["arm64-v8a" ]//, "armeabi-v7a", "x86_64", "x86"]
    def newAbis = providers
            .gradleProperty("com.google.android.filament.abis")
            .get()
            .split(',')
    if (!newAbis.contains("all")) {
        abis = newAbis
    }

    ext.versions = [
            'minSdk': 19,
            'targetSdk': 33,
            'compileSdk': 33,
            'kotlin': '1.7.10',
            'kotlin_coroutines': '1.6.1',
            'buildTools': '33.0.0',
            'ndk': '25.1.8937393',
            'androidx_core': '1.9.0',
            'androidx_annotations': '1.3.0'
    ]

    ext.deps = [
            'androidx': [
                    'annotations': "androidx.annotation:annotation:${versions.androidx_annotations}",
                    'core': "androidx.core:core:${versions.androidx_core}",
            ],
            'kotlin': "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}",
            'coroutines': [
                    'core': "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlin_coroutines}",
                    'android': "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlin_coroutines}",
            ]
    ]

    dependencies {
        // NOTE: See TODO in gradle.properties once we move to Gradle 7.4
        classpath 'com.android.tools.build:gradle:7.3.0'
        //classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
    }

    ext.cmakeArgs = [
            "--no-warn-unused-cli",
            "-DANDROID_PIE=ON",
            "-DEGL=ON",
            "-DANDROID_PLATFORM=21",
            "-DFILAMENT_SINGLE_THREADED=1",
            "-DANDROID_STL=c++_static",
            "-DFILAMENT_DIST_DIR=${filamentPath}".toString(),
            "-DFILAMENT_SUPPORTS_VULKAN=${excludeVulkan ? 'OFF' : 'ON'}".toString(),
            "-DFILAMENT_ENABLE_MATDBG=${matdbg ? 'ON' : 'OFF'}".toString(),
            "-DFILAMENT_DISABLE_MATOPT=${matdbg ? 'ON' : 'OFF'}".toString()
    ]

    ext.cppFlags = [
            "-std=c++17",
            "-fno-stack-protector",
            //"-fno-exceptions",
            "-fno-unwind-tables",
            "-fno-asynchronous-unwind-tables",

            "-ffast-math",
            "-ffp-contract=fast",
            "-fvisibility-inlines-hidden",
            "-fvisibility=hidden",
            "-fomit-frame-pointer",
            "-ffunction-sections",
            "-fdata-sections",
            "-no-canonical-prefixes",
            "-Wformat",
            "-Werror=format-security",
            "-Wno-unused-command-line-argument",
            "-Wl,--gc-sections",
            "-Wl,-Bsymbolic-functions",
            "-Wl,--hash-style=both", // Required to support API levels below 23
    ]

    ext.abis = abis

    repositories {
        mavenCentral()
        google()
    }
}

//plugins {
//    id 'com.android.application' version '7.3.1' apply false
//    id 'com.android.library' version '7.3.1' apply false
//}